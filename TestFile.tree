366	ROOT	1	365
365	prog	2	18	364
18	cdefn	6	0	1	2	16	13	17
0	struct	0
1	label	0
2	{	0
16	field_defn	5	4	5	7	6	15
4	type	1	3
3	int	0
5	index	0
7	decl_assign	0
6	;	0
15	field_defn	5	9	10	12	11	14
9	type	1	8
8	string	0
10	name	0
12	decl_assign	0
11	;	0
14	field_defn	0
13	}	0
17	;	0
364	prog	2	60	363
60	cdefn	6	20	21	22	31	32	59
20	type	1	19
19	int	0
21	eat	0
22	(	0
31	args	3	24	25	30
24	type	1	23
23	int	0
25	w	0
30	rght_args	3	26	28	29
26	,	0
28	type	1	27
27	int	0
29	food	0
32	)	0
59	body	3	33	58	55
33	{	0
58	stmts	2	43	57
43	stmt	2	42	41
42	simple	3	36	37	40
36	lftval	1	34
34	w	0
37	asn_op	1	35
35	-=	0
40	expr	1	39
39	number	1	38
38	 1	0
41	;	0
57	stmts	2	54	56
54	stmt	3	44	53	50
44	return	0
53	null_expr	1	52
52	expr	3	47	48	51
47	expr	1	45
45	w	0
48	bin_op	1	46
46	+	0
51	expr	1	49
49	food	0
50	;	0
56	stmts	0
55	}	0
363	prog	2	95	362
95	cdefn	6	62	63	64	70	68	94
62	type	1	61
61	string	0
63	fat	0
64	(	0
70	args	3	66	67	69
66	type	1	65
65	int	0
67	w	0
69	rght_args	0
68	)	0
94	body	3	71	93	91
71	{	0
93	stmts	2	90	92
90	stmt	3	72	89	86
72	return	0
89	null_expr	1	88
88	expr	3	75	76	87
75	expr	1	73
73	w	0
76	bin_op	1	74
74	>	0
87	expr	5	79	80	82	83	85
79	expr	1	78
78	number	1	77
77	 200	0
80	?	0
82	expr	1	81
81	"Yes"	0
83	:	0
85	expr	1	84
84	"No"	0
86	;	0
92	stmts	0
91	}	0
362	prog	2	360	361
360	cdefn	6	97	98	99	101	100	359
97	type	1	96
96	int	0
98	main	0
99	(	0
101	args	0
100	)	0
359	body	3	102	358	349
102	{	0
358	stmts	2	110	357
110	stmt	2	109	107
109	simple	3	105	106	108
105	type	2	103	104
103	struct	0
104	label	0
106	prog	0
108	decl_assign	0
107	;	0
357	stmts	2	123	356
123	stmt	2	122	121
122	simple	3	115	117	120
115	lftval	3	113	112	114
113	lftval	1	111
111	prog	0
112	.	0
114	index	0
117	asn_op	1	116
116	=	0
120	expr	1	119
119	number	1	118
118	 0	0
121	;	0
356	stmts	2	135	355
135	stmt	2	134	133
134	simple	3	128	130	132
128	lftval	3	126	125	127
126	lftval	1	124
124	prog	0
125	.	0
127	name	0
130	asn_op	1	129
129	=	0
132	expr	1	131
131	"Test Name"	0
133	;	0
355	stmts	2	279	354
279	stmt	9	136	137	149	145	158	157	163	164	278
136	for	0
137	(	0
149	null_simple	1	148
148	simple	3	139	140	147
139	type	1	138
138	int	0
140	i	0
147	decl_assign	3	141	144	146
141	=	0
144	expr	1	143
143	number	1	142
142	 0	0
146	decl_assign	0
145	;	0
158	expr	3	152	153	156
152	expr	1	150
150	i	0
153	bin_op	1	151
151	<	0
156	expr	1	155
155	number	1	154
154	 100	0
157	;	0
163	null_simple	1	162
162	simple	2	161	160
161	lftval	1	159
159	i	0
160	++	0
164	)	0
278	body	3	165	277	274
165	{	0
277	stmts	2	190	276
190	stmt	2	189	186
189	simple	3	172	173	188
172	type	3	169	170	171
169	type	2	167	168
167	type	1	166
166	void	0
168	*	0
170	[	0
171	]	0
173	A	0
188	decl_assign	3	174	185	187
174	=	0
185	expr	6	175	176	180	181	184	183
175	alloc_array	0
176	(	0
180	type	2	178	179
178	type	1	177
177	void	0
179	*	0
181	,	0
184	expr	1	182
182	i	0
183	)	0
187	decl_assign	0
186	;	0
276	stmts	2	273	275
273	stmt	9	191	192	204	200	212	210	217	218	272
191	for	0
192	(	0
204	null_simple	1	203
203	simple	3	194	195	202
194	type	1	193
193	int	0
195	j	0
202	decl_assign	3	196	199	201
196	=	0
199	expr	1	198
198	number	1	197
197	 0	0
201	decl_assign	0
200	;	0
212	expr	3	207	208	211
207	expr	1	205
205	j	0
208	bin_op	1	206
206	<	0
211	expr	1	209
209	i	0
210	;	0
217	null_simple	1	216
216	simple	2	215	214
215	lftval	1	213
213	j	0
214	++	0
218	)	0
272	body	3	219	271	269
219	{	0
271	stmts	2	268	270
268	stmt	6	220	221	230	229	248	267
220	if	0
221	(	0
230	expr	3	224	225	228
224	expr	1	222
222	j	0
225	bin_op	1	223
223	>	0
228	expr	1	227
227	number	1	226
226	 2	0
229	)	0
248	body	3	231	247	245
231	{	0
247	stmts	2	244	246
244	stmt	2	243	242
243	simple	3	234	235	241
234	lftval	1	232
232	A	0
235	asn_op	1	233
233	=	0
241	expr	4	236	237	239	240
236	alloc	0
237	(	0
239	type	1	238
238	void	0
240	)	0
242	;	0
246	stmts	0
245	}	0
267	else_stmt	2	249	266
249	else	0
266	body	3	250	265	263
250	{	0
265	stmts	2	262	264
262	stmt	2	261	258
261	simple	3	252	253	260
252	type	1	251
251	int	0
253	a	0
260	decl_assign	3	254	257	259
254	=	0
257	expr	1	256
256	number	1	255
255	 2	0
259	decl_assign	0
258	;	0
264	stmts	0
263	}	0
270	stmts	0
269	}	0
275	stmts	0
274	}	0
354	stmts	2	290	353
290	stmt	2	289	286
289	simple	3	281	282	288
281	type	1	280
280	string	0
282	fun	0
288	decl_assign	3	283	285	287
283	=	0
285	expr	1	284
284	"I\t had some"	0
287	decl_assign	0
286	;	0
353	stmts	2	302	352
302	stmt	2	301	298
301	simple	3	292	293	300
292	type	1	291
291	int	0
293	w	0
300	decl_assign	3	294	297	299
294	=	0
297	expr	1	296
296	number	1	295
295	 60	0
299	decl_assign	0
298	;	0
352	stmts	2	341	351
341	stmt	5	303	304	316	315	340
303	while	0
304	(	0
316	expr	2	306	314
306	un_op	1	305
305	!	0
314	expr	4	307	308	313	310
307	fat	0
308	(	0
313	params	2	311	312
311	expr	1	309
309	w	0
312	rght_params	0
310	)	0
315	)	0
340	body	3	317	339	337
317	{	0
339	stmts	2	336	338
336	stmt	2	335	334
335	simple	3	320	321	333
320	lftval	1	318
318	w	0
321	asn_op	1	319
319	=	0
333	expr	4	322	323	332	330
322	eat	0
323	(	0
332	params	2	326	331
326	expr	1	324
324	w	0
331	rght_params	2	325	329
325	,	0
329	expr	1	328
328	number	1	327
327	 10	0
330	)	0
334	;	0
338	stmts	0
337	}	0
351	stmts	2	348	350
348	stmt	3	342	347	346
342	return	0
347	null_expr	1	345
345	expr	1	344
344	number	1	343
343	 0	0
346	;	0
350	stmts	0
349	}	0
361	prog	0
